#include <mpi.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <map>
#include <sstream>
#include <set>

#include <thread>
#include <mutex>
#include <chrono>
#include <atomic>
#include <filesystem>

#define CHUNK_SIZE 32
#define REPLICATION_FACTOR 3
#define UPLOAD_TAG 1
#define RETRIEVE_TAG 2
#define SEARCH_TAG 3
#define FAILOVER_TAG 4
#define RECOVER_TAG 5
#define EXIT_TAG 6
#define HEARTBEAT_TAG 7
#define MAIN_TAG 8
#define THREAD_TAG 9

#define FAILOVER_INTERVAL 3
#define HEARTBEAT_INTERVAL 1

using namespace std;

MPI_Datatype MPI_BODY;

struct Compare
{
    bool operator()(const pair<int, int> &a, const pair<int, int> &b) const
    {
        return a.first < b.first || (a.first == b.first && a.second < b.second);
    }
};

using namespace std;

struct ChunkMetaData
{
    int chunk_id;
    vector<int> replica_node_ranks;
};

struct FileMetaData
{
    string file_name;
    vector<ChunkMetaData> chunks;
    vector<int> offsets;
};

struct Body
{
    int request_type;
    int chunk_id;
    int sender_rank;
    bool stop;
};

struct Chunk
{
    int chunk_id;
    string data;
};



std::mutex heartbeat_mutex;
std::unordered_map<int, std::chrono::time_point<std::chrono::steady_clock>> last_heartbeat;
std::atomic<bool> running(true);

void sender_thread(int rank, const vector<bool> &stop_heartbeats)
{
    while (running)
    {
        if (!stop_heartbeats[rank])
        {
            Body body;
            body.request_type = HEARTBEAT_TAG;
            body.sender_rank = rank;
            MPI_Send(&body, 1, MPI_BODY, 0, HEARTBEAT_TAG, MPI_COMM_WORLD);
        }
        std::this_thread::sleep_for(std::chrono::seconds(HEARTBEAT_INTERVAL));
    }
}

void receiver_thread(int size)
{
    while (running)
    {
        MPI_Status status;
        int flag = 0;
        MPI_Iprobe(MPI_ANY_SOURCE, HEARTBEAT_TAG, MPI_COMM_WORLD, &flag, &status);
        if (flag)
        {
            Body body;
            MPI_Recv(&body, 1, MPI_BODY, status.MPI_SOURCE, HEARTBEAT_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            std::lock_guard<std::mutex> lock(heartbeat_mutex);
            last_heartbeat[body.sender_rank] = std::chrono::steady_clock::now();
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
}

void monitor_thread(int size)
{
    while (running)
    {
        std::this_thread::sleep_for(std::chrono::seconds(1));
        auto now = std::chrono::steady_clock::now();
        std::lock_guard<std::mutex> lock(heartbeat_mutex);
        for (int i = 1; i < size; i++)
        {
            if (last_heartbeat.find(i) != last_heartbeat.end() &&
                std::chrono::duration_cast<std::chrono::seconds>(now - last_heartbeat[i]).count() > FAILOVER_INTERVAL)
            {
                last_heartbeat.erase(i);
            }
        }
    }
}

int main(int argc, char **argv)
{
    int size, rank;
    int provided;
    MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    int blocklength = sizeof(Body);
    MPI_Type_contiguous(blocklength, MPI_BYTE, &MPI_BODY);
    MPI_Type_commit(&MPI_BODY);
    vector<bool> stop_heartbeats(size, false);
    if (rank == 0)
    {
        map<string, FileMetaData> files;
        multiset<pair<int, int>, Compare> chunk_size_set;
        std::thread monitor(monitor_thread, size);
        std::thread receiver(receiver_thread, size);
        for (int i = 1; i < size; i++)
        {
            chunk_size_set.insert({0, i});
        }
        int N = size;
        string command;
        set<int> failed_nodes;
        while (getline(cin, command))
        {
            stringstream ss(command);
            ss >> command;
            if (command == "upload")
            {

            }
            else if (command == "retrieve")
            {

            }
            else if (command == "search")
            {

            }
            else if (command == "failover")
            {
                int failover_rank;
                ss >> failover_rank;
                if(failed_nodes.find(failover_rank) != failed_nodes.end()){
                    cout << -1 << endl;
                    continue;
                }
                if(failover_rank == 0){
                    cout << -1 << endl;
                    continue;
                }
                failed_nodes.insert(failover_rank);
                cout << 1 << endl;
                auto it = std::find_if(chunk_size_set.begin(), chunk_size_set.end(), [failover_rank](const std::pair<int, int> &p)
                                       { return p.second == failover_rank; });
                if (it != chunk_size_set.end())
                {
                    std::pair<int, int> updated = *it;
                    chunk_size_set.erase(it);
                    updated.first = 0;
                    chunk_size_set.insert(updated);
                }
                stop_heartbeats[failover_rank] = true;
                Body body = {FAILOVER_TAG, 0, rank, true};
                MPI_Send(&body, 1, MPI_BODY, failover_rank, MAIN_TAG, MPI_COMM_WORLD);
            }
            else if (command == "recover")
            {
                int recover_rank;
                ss >> recover_rank;
                if(recover_rank == 0){
                    cout << -1 << endl;
                    continue;
                }
                if(failed_nodes.find(recover_rank) == failed_nodes.end()){
                    cout << -1 << endl;
                    continue;
                }
                Body body = {RECOVER_TAG, 0, rank, false};
                MPI_Send(&body, 1, MPI_BODY, recover_rank, MAIN_TAG, MPI_COMM_WORLD);
                failed_nodes.erase(recover_rank);
                stop_heartbeats[recover_rank] = false;
                cout << 1 << endl;
            }
            else if (command == "exit")
            {
                for (int i = 1; i < size; i++)
                {
                    Body body;
                    body.request_type = EXIT_TAG;
                    MPI_Send(&body, 1, MPI_BODY, i, MAIN_TAG, MPI_COMM_WORLD);
                }
                running = false;
                break;
            }
        }
        monitor.join();
        receiver.join();
    }
    else
    {
        map<string, vector<Chunk>> storage;
        std::thread sender(sender_thread, rank, std::ref(stop_heartbeats));
        while (true)
        {
            Body body;
            MPI_Status status;
            MPI_Recv(&body, 1, MPI_BODY, 0, MAIN_TAG, MPI_COMM_WORLD, &status);
            if (body.request_type == UPLOAD_TAG)
            {
                Chunk chunk;
                chunk.chunk_id = body.chunk_id;
                int file_name_size;
                MPI_Recv(&file_name_size, 1, MPI_INT, 0, UPLOAD_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                string file_name;
                file_name.resize(file_name_size);
                MPI_Recv(&file_name[0], file_name_size, MPI_CHAR, 0, UPLOAD_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                int chunk_data_size;
                MPI_Recv(&chunk_data_size, 1, MPI_INT, 0, UPLOAD_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                string chunk_data;
                chunk_data.resize(chunk_data_size);
                MPI_Recv(&chunk_data[0], chunk_data_size, MPI_CHAR, 0, UPLOAD_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                chunk.data = chunk_data;
                storage[file_name].push_back(chunk);
            }
            else if (body.request_type == RETRIEVE_TAG)
            {
                string file_name;
                int file_name_size;
                MPI_Recv(&file_name_size, 1, MPI_INT, 0, RETRIEVE_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                file_name.resize(file_name_size);
                MPI_Recv(&file_name[0], file_name_size, MPI_CHAR, 0, RETRIEVE_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                int chunk_id = body.chunk_id;
                for (int i = 0; i < storage[file_name].size(); i++)
                {
                    if (storage[file_name][i].chunk_id == chunk_id)
                    {
                        int chunk_data_size = storage[file_name][i].data.size();
                        MPI_Send(&chunk_data_size, 1, MPI_INT, 0, RETRIEVE_TAG, MPI_COMM_WORLD);
                        MPI_Send(storage[file_name][i].data.c_str(), chunk_data_size, MPI_CHAR, 0, RETRIEVE_TAG, MPI_COMM_WORLD);
                    }
                }
            }
            else if (body.request_type == SEARCH_TAG)
            {
                string file_name;
                int file_name_size;
                MPI_Recv(&file_name_size, 1, MPI_INT, 0, SEARCH_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                file_name.resize(file_name_size);
                MPI_Recv(&file_name[0], file_name_size, MPI_CHAR, 0, SEARCH_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                string word;
                int word_size;
                MPI_Recv(&word_size, 1, MPI_INT, 0, SEARCH_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                word.resize(word_size);
                MPI_Recv(&word[0], word_size, MPI_CHAR, 0, SEARCH_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                vector<pair<int, string>> chunks;
                for (int i = 0; i < storage[file_name].size(); i++)
                {
                    string chunk_string = storage[file_name][i].data;
                    stringstream ss(chunk_string);
                    string first_word, last_word;
                    string temp;
                    bool flag = false;
                    while (ss >> temp)
                    {
                        if (first_word.empty())
                        {
                            first_word = temp;
                        }
                        last_word = temp;
                        if (temp == word)
                        {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag && (chunk_string.find(first_word) != string::npos || chunk_string.find(last_word) != string::npos))
                    {
                        flag = true;
                    }
                    if (flag)
                    {
                        chunks.emplace_back(storage[file_name][i].chunk_id, storage[file_name][i].data);
                    }
                }
                int num_chunks = chunks.size();
                MPI_Send(&num_chunks, 1, MPI_INT, 0, SEARCH_TAG, MPI_COMM_WORLD);
                for (int i = 0; i < num_chunks; i++)
                {
                    int chunk_id = chunks[i].first;
                    int chunk_data_size = chunks[i].second.size();
                    MPI_Send(&chunk_id, 1, MPI_INT, 0, SEARCH_TAG, MPI_COMM_WORLD);
                    MPI_Send(&chunk_data_size, 1, MPI_INT, 0, SEARCH_TAG, MPI_COMM_WORLD);
                    MPI_Send(chunks[i].second.c_str(), chunk_data_size, MPI_CHAR, 0, SEARCH_TAG, MPI_COMM_WORLD);
                }
            }
            else if (body.request_type == FAILOVER_TAG)
            {
                stop_heartbeats[rank] = true;
            }
            else if (body.request_type == RECOVER_TAG)
            {
                stop_heartbeats[rank] = false;
            }
            else if (body.request_type == EXIT_TAG)
            {
                running = false;
                break;
            }
        }
        sender.join();
    }
    MPI_Finalize();
    return 0;
}